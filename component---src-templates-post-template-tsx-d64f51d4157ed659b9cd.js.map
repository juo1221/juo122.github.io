{"version":3,"file":"component---src-templates-post-template-tsx-d64f51d4157ed659b9cd.js","mappings":"qQAWA,IAAMA,GAAmB,6NAcnBC,GAAY,8SAkBZC,GAAK,sVAkBLC,GAAQ,kRAmCd,EApB2D,YAIvD,IAHFC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAGA,OACE,QAACN,EAAD,MACE,QAACC,EAAD,CAAcM,QAHC,kBAAMC,OAAOC,QAAQC,UAIlC,QAAC,IAAD,CAAiBC,KAAMC,EAAAA,QAEzB,QAACV,EAAD,KAAQE,IACR,QAACD,EAAD,MACE,mBAAMG,EAAWO,KAAK,SACtB,mBAAMR,MC3Ed,IAAMS,GAAe,iJASfC,GAAkB,QAAO,SAACC,GAAD,OAC7B,QAAC,EAAAC,GAAD,UAAiBD,EAAjB,CAAwBE,MAAO,CAAEC,SAAU,iBADrB,sBAAH,gJA2BrB,EAdmD,YAK/C,IAJFf,EAIC,EAJDA,MACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,WACAc,EACC,EADDA,UAEA,OACE,QAACN,EAAD,MACE,QAACC,EAAD,CAAiBM,MAAOD,EAAWE,IAAI,eACvC,QAAC,EAAD,CAAclB,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,MCvC1D,IAAMiB,GAAgB,onDA+KtB,EAJyD,YAAqB,IAATC,EAAQ,EAARA,KACnE,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MChL9D,IAaMG,GAAiB,wGAkCvB,EA5ByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA5BM,gCA6BNC,KA5BO,4BA6BP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDd,EAAWe,aAAaF,EAAKC,MAG/BlB,EAAQG,QAAQiB,YAAYhB,MAC3B,KAEI,QAACL,EAAD,CAAmBsB,IAAKrB,KCOjC,EAnC2D,YAKvD,IAHqBsB,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAcIH,EAAM,GAbRK,KACE/B,EAFJ,EAEIA,KAFJ,IAGIgC,YACEpD,EAJN,EAIMA,MACAqD,EALN,EAKMA,QACApD,EANN,EAMMA,KACAC,EAPN,EAOMA,WAPN,IAQMc,UACqBsC,EAT3B,EASQC,gBAAmBD,gBACnBE,EAVR,EAUQA,UAMR,OACE,QAACC,EAAA,EAAD,CAAUzD,MAAOA,EAAO0D,YAAaL,EAASM,IAAKV,EAAMhC,MAAOuC,IAC9D,QAAC,EAAD,CACExD,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZc,UAAWsC,KAEb,QAAC,EAAD,CAAalC,KAAMA,KACnB,QAAC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  height: 400px;\r\n  margin: 0 auto;\r\n  padding: 60px 0;\r\n  color: #ffffff;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 40px 20px;\r\n  }\r\n`\r\n\r\nconst PrevPageIcon = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background: #ffffff;\r\n  color: #000000;\r\n  font-size: 22px;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  @media (max-width: 768px) {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 45px;\r\n  font-weight: 800;\r\n  font-family: KOTRA_BOLD;\r\n  @media (max-width: 768px) {\r\n    font-size: 30px;\r\n    margin-top: 1rem;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n  }\r\n`\r\n\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n}) {\r\n  const goBackPage = () => window.history.back()\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <PrevPageIcon onClick={goBackPage}>\r\n        <FontAwesomeIcon icon={faArrowLeft} />\r\n      </PrevPageIcon>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <div>{categories.join(' / ')}</div>\r\n        <div>{date}</div>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ninterface PostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 700px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  font-size: 1rem;\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n    color: #434343;\r\n    font-family: KOPUBWORLD DOTUM MEDIUM;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 60px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 10px;\r\n  }\r\n\r\n  h1 + hr,\r\n  h2 + hr,\r\n  h3 + hr {\r\n    margin-top: -30px;\r\n  }\r\n\r\n  h1 {\r\n    font-family: sans-serif;\r\n    color: #434343;\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-family: sans-serif;\r\n    color: #434343;\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-family: sans-serif;\r\n    color: #434343;\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #9c2222;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 40px;\r\n    padding: 10px;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border-color: #ffffff44;\r\n  }\r\n  hr + * {\r\n    margin-top: 30px;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    font-size: 1.2rem;\r\n    font-weight: 700;\r\n    color: #12b886;\r\n    text-decoration: none;\r\n    transition: all 0.3s ease-in-out;\r\n    &:before {\r\n      content: 'üîó ';\r\n    }\r\n    &:hover {\r\n      color: black;\r\n    }\r\n  }\r\n\r\n  // Adjust strong Element Style\r\n\r\n  strong {\r\n    color: #e08728;\r\n  }\r\n\r\n  // Adjust img Element Style\r\n\r\n  em {\r\n    display: block;\r\n    text-align: center;\r\n    font-size: 1rem;\r\n    color: light-grey;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n    background-color: #282c34;\r\n    border-radius: 3px;\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n  pre[class*='language-'] code,\r\n  pre code {\r\n    color: #fff;\r\n    padding: 0;\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, Courier New,\r\n      monospace;\r\n  }\r\n\r\n  code:not(pre > code) {\r\n    color: #f35e79 !important;\r\n    background: rgba(27, 31, 35, 0.05);\r\n    padding: 5px;\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  } // Markdown Responsive Design\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent\r\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'juo1221/juo1221.github.io' // ÏûêÏã† Í≥ÑÏ†ïÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨Î°ú ÏÑ§Ï†ï\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","PrevPageIcon","Title","PostData","title","date","categories","onClick","window","history","back","icon","faArrowLeft","join","PostHeadWrapper","BackgroundImage","props","G","style","position","thumbnail","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","Template","description","url"],"sourceRoot":""}