{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/TIL/2/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>면접 스터디</h2>\n<ul>\n<li><a href=\"https://www.notion.so/11-28-3f765a6739724aaa8a08c28a4dbb59a4\" target=\"_blank\" rel=\"nofollow\">11 / 28 면접공부</a></li>\n<li>시간복잡도에 대한 이해 필요</li>\n<li>실행 컨텍스트에 대한 이해 필요</li>\n</ul>\n<h2>웹팩</h2>\n<ul>\n<li>웹팩 개발 서버\n<ul>\n<li>브라우저에서 파일을 직접 로딩하는 것이 아니라 서버 프로그램으로 파일을 읽고 요청한 클라이언트에 데이터를 제공하는 개발환경이 필요하다.</li>\n<li>webpack-dev-server를 이용해 이러한 개발용 서버 환경을 맞출 수 있다.</li>\n</ul>\n</li>\n<li>API 서버연동\n<ul>\n<li>devServer.before 속성을 이용해 목업 API를 제작\n<ul>\n<li>개발 초기 서버 api가 만들어지기 전 서버 api를 <code class=\"language-text\">프론트엔드에서 먼저 사용</code>할 수 있다는 장점이 있다.</li>\n</ul>\n</li>\n<li>Cors 문제 프론트엔드에서 해결하는 방법\n<ul>\n<li>proxing 사용\n<ul>\n<li>웹팩의 devServer.proxy 중\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"/api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://localhost:포트번호\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n를 이용하면 개발 서버에 들어온 모든 http요청중 /api로 시작되는것은 8081로 요청하는 설정.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>꼬리물기 최적화 ( tail recursion )</h2>\n<p>Tail recursion : 재귀함수도 일정한 조건을 지키면 제어문처럼 메모리에 resource가 쌓이지 않고 해제 되는것</p>\n<ul>\n<li>메모리에 상주하지 않으니 stack overflow 에러가 발생하지 않는다.</li>\n<li>언어 차원에서 지원해야한다.</li>\n<li>기계적으로 제어문으로 바꿀 수 있다.\n<ul>\n<li>tail recursion을 지원하지 않는 언어에서는 제어문을 이용해야하기 때문에 제어문으로 바꿀 수 있는 능력이 필요하다.</li>\n<li>JS는 tail recursion을 지원하지 않지만 유일하게 <code class=\"language-text\">사파리에서는 동작</code>한다. (크롬은 지원x)</li>\n</ul>\n</li>\n</ul>\n<h3>변환 방법</h3>\n<ul>\n<li>재귀함수로 코드 작성</li>\n<li>재귀함수를 tail recursion으로 변경</li>\n<li>tail recursion을 제어문으로 기계적으로 변경\n<ul>\n<li><code class=\"language-text\">기계적으로</code> 변경한다는 말은 tail recursion의 <code class=\"language-text\">논리를 100% 그대로 사용</code>하여 제어문으로 바꿔야 함을 의미한다.</li>\n<li>마치 사람이 컴파일러가 된 것처럼 바꿔야한다.</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>\n<p>에러표출을 위해 문을 식으로 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">err</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> v\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>합계에 대한 재귀함수</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_sum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">?</span> num <span class=\"token operator\">+</span> <span class=\"token function\">_sum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">typeof</span> num <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid type of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_sum</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>합계에 대한 tail recursion</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> acc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">?</span> <span class=\"token function\">_sum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> acc <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> acc<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">typeof</span> num <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid type of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_sum</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>제어문으로 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid type of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> acc <span class=\"token operator\">=</span> acc <span class=\"token operator\">+</span> i\n    <span class=\"token keyword\">return</span> acc\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>사파리에서 실험시,</p>\n<p>2번의 경우 num에 100,000 이상의 숫자 대입시 call stack 초과 에러 발생</p>\n<p>3번의 경우 num에 100,000 이상의 숫자를 대입하더라도 계산가능</p>","frontmatter":{"title":"TIL","summary":"2021-11-28 학습내용","date":"2021.11.28.","categories":["TIL"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/9cbcf36c7136dae74e44edbccc3cdba3/afa5c/post.png","srcSet":"/static/9cbcf36c7136dae74e44edbccc3cdba3/2fe1e/post.png 480w,\n/static/9cbcf36c7136dae74e44edbccc3cdba3/9bec7/post.png 960w,\n/static/9cbcf36c7136dae74e44edbccc3cdba3/afa5c/post.png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"},"sources":[{"srcSet":"/static/9cbcf36c7136dae74e44edbccc3cdba3/3a3a2/post.webp 480w,\n/static/9cbcf36c7136dae74e44edbccc3cdba3/bde8a/post.webp 960w,\n/static/9cbcf36c7136dae74e44edbccc3cdba3/c512e/post.webp 1920w","type":"image/webp","sizes":"(min-width: 1920px) 1920px, 100vw"}]},"width":1920,"height":1080}},"publicURL":"/static/9cbcf36c7136dae74e44edbccc3cdba3/post.png"}}}}]}},"pageContext":{"slug":"/TIL/2/"}},
    "staticQueryHashes": []}