{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/assignReview/2/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>Forest-Memo</h2>\n<blockquote>\n<p>휴양림 정보를 저장할 수 있는 간단한 메모 App.</p>\n</blockquote>\n<img src=\"https://user-images.githubusercontent.com/82592845/155390853-41dff1fd-90bf-4453-9117-4e8849155e83.png\">\n<h2>맡은 역할</h2>\n<ul>\n<li>공공API로 받아온 데이터를 무한스크롤로 구현하기.</li>\n</ul>\n<h2>Error Handling Log &#x26;&#x26; 어려웠던 점 review</h2>\n<ol>\n<li>협업</li>\n<li>cors문제 직면</li>\n<li>intersection observer + 리액트의 무한스크롤 구현</li>\n</ol>\n<h3>1. 협업</h3>\n<p>그동안 대부분의 시간을 혼자서 인강을 보며 공부하거나 개인 프로젝트를 하는데 소비했지 팀프로젝트는 소홀히 하고 있음을 어느순간 강하게 느꼈다. 유튜브나 여러 강의를 듣다보면 항상 듣게되는 얘기가 있는데 바로 커뮤니케이션의 중요성이다.</p>\n<p>개발자들간 소통문제는 굉장히 중요하다고 생각한다. 특히 나와 같이 경험자체가 많이 부족한 초보자들은 익숙치 않은 용어들도 많고 협업 툴에 대한 이해도도 낮을 뿐더러 코드도 잘 못 짜기 때문에 커뮤니케이션 능력은 당연히 낮을 수 밖에 없다. 개인적으로 소통능력은 코드에 담긴 상대방의 의도를 얼마나 잘 이해할 수 있는지와 자신의 코드를 얼마나 상세하게 설명해줄 수 있는가에 달려있다고 생각한다. 이외의 중요한것들도 많겠지만.\n<br/></p>\n<p>아무튼 이런 능력들이 많이 부족하다고 느끼던 와중에 약 한달동안 빡세게 팀프로젝트를 경험할 수 있는 좋은 기회를 얻게 됐다. 지금은 줄었지만 7명에서 시작한 프로젝트의 첫 시작 때 공포감을 좀 느꼈었다. 나를 제외한 모두가 협업 경험을 가졌던 것도 그랬고 첫 시작을 어떻게 해야하는지 감을 잡지 못해서 혼자 끙끙 앓았던 기억이 난다ㅎㅎ..</p>\n<p>다행히 팀원들계서 친절하고 상세히 알려주셨고 어찌어찌 감을 좀 잡을 수 있게 됐다. 이제부터 내가 해맸던 기초적인 부분을 기록하려고 한다.</p>\n<h3>레포 fork</h3>\n<p>대부분 비슷하겠지만 우리가 팀프로젝트를 진행한 방식은 다음과 같다. 팀장이 repo를 만들면 main과 dev브랜치를 딴다. main브랜치는 배포시에만 사용하고 개발할땐 오직 dev브랜치만 이용하도록 한다. 팀원은 repo를 fork한 뒤 로컬에서 dev브랜치를 만들고 upstream 레포에 올라와있는 dev 브랜치를 pull한다. 이후엔 자유롭게 로컬에서 작업하면서 작업내용을 기능단위로 커밋한다. 이후 머지타임이 되면 각자 작업한 커밋내용을 dev브랜치로 Push해서 코드를 합치게된다.</p>\n<p>처음엔 <strong>왜 fork를 해야하는지 이유를 알지 못했다.</strong> 팀장의 upstream 레포를 바로 클론해와서 작업하는것과 어떤 차이가 잘 몰랐다. fork한 뒤 작업을 하게되면 얻게되는 이점은 다음과 같다.</p>\n<br/>\n<b>최소한의 안전 확보</b>\n<p>fork를 하지 않고 작업해도 작업 자체는 무리없이 진행할 수 있지만 여러사람이 작업할때 발생할 수 있는 문제를 사전에 방지할 수 있다. 여기서 발생할 수 있는 문제란 <strong>코드의 병합 시 발생할 수 있는 문제</strong> 를 말한다.</p>\n<p>내가 커밋하고 푸시하는 내용이 내 원격 저장소 (origin)에만 먼저 반영되고 upstream에는 반영되지 않기 때문에 로컬에서 자유롭게 코딩을 할 수 있다. 그리고 작업한 내용을 push 했을 경우 원격 저장소의 권한을 가진 사람만이 병합을 진행할 수 있기 때문에 코드가 삭제되거나 꼬여버리는 문제를 방지 할 수 있다.</p>\n<p>팀프로젝트를 하기 전 여러가지 규칙을 먼저 정하게 된다. issue 작성은 어떻게 하고, pr은 어떤 방식으로 날릴지 커밋은 어떻게 작성할지 등을 먼저 정하지만 모든 사람이 이러한 규칙을 철저하게 따르기는 사실 힘들다고 생각한다. 누구나 실수할 수 있고, 더욱이 초보일 경우는 그런 빈도수가 잦을 확률이 높기 때문에 제공되는 안전장치인 fork를 이용하도록 하자.</p>\n<h3>역할 분담</h3>\n<p>프로젝트를 하면 할수록 역할을 나누는게 굉장히 중요하다는 것을 많이 느꼈다. 역할이 명확하지 않으면 중첩된 기능구현을 하게 될 가능성이 상당이 높아진다. 이것은 머지할때 충돌로 이루어지기 때문에 코드를 수정해야하는 추가적인 시간적 비용이 들어간다. 애써 작업한 내용이 머지 후 손실되는 쓰라린 경험을 해봤기 때문에 역할 분담의 중요성을 더욱 느꼈던것 같다.</p>\n<p>팀원분들도 비슷한 경험을 겪으셔서 그런지 프로젝트를 진행할수록 이슈관리, 역할분담, 칸반보드 이용 등 협업을 도와주는 다양한 툴에 대한 관심이 자연스럽게 높아졌고 결론적으로 처음보다 확실히 개선된 모습을 볼 수 있었다.</p>\n<h3>충돌 해결</h3>\n<p>우리는 머지 타임을 정해놓고 시간이 되면 다 같이 모여 머지하는 것을 지켜보는 식으로 프로젝트를 진행했다. 예를들어 저녁 8시 30에 머지한다고 하면 그 전까지 최대한 맡은 부분을 구현하다가 시간이 되면 작업이 끝나지 않았더라도 일단 push하고 코드를 합쳤다. 이때 머지는 팀장님의 화면공유로 보두가 지켜보는 가운데서 이루어졌는데 충돌을 해결하는 과정에서 약간의 아쉬움이 남아있다.</p>\n<p>github</p>\n<h2>2. 무한스크롤 기능 구현</h2>\n<h3>intersection observer 이용</h3>\n<h3>useCallback</h3>\n<h2>참고</h2>","frontmatter":{"title":"팀프로젝트 종료 후기","summary":"1달간의 팀프로젝트를 경험한 후 후기","date":"2022.03.18.","categories":["TIL","ASSIGN"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/b3221240861b7e5156657631edc409d2/afa5c/TIL.png","srcSet":"/static/b3221240861b7e5156657631edc409d2/2fe1e/TIL.png 480w,\n/static/b3221240861b7e5156657631edc409d2/9bec7/TIL.png 960w,\n/static/b3221240861b7e5156657631edc409d2/afa5c/TIL.png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"},"sources":[{"srcSet":"/static/b3221240861b7e5156657631edc409d2/3a3a2/TIL.webp 480w,\n/static/b3221240861b7e5156657631edc409d2/bde8a/TIL.webp 960w,\n/static/b3221240861b7e5156657631edc409d2/c512e/TIL.webp 1920w","type":"image/webp","sizes":"(min-width: 1920px) 1920px, 100vw"}]},"width":1920,"height":1080}},"publicURL":"/static/b3221240861b7e5156657631edc409d2/TIL.png"}}}}]}},"pageContext":{"slug":"/assignReview/2/"}},
    "staticQueryHashes": []}