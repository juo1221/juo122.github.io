{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/TECH/tailRecursion3/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3>JSON.stringify 구현하기 ( 개선 후 코드 )</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab\"c'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">구현할함수</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>true가 나오도록 함수를 만들어보자.</p>\n<h3>개선할 점</h3>\n<ol>\n<li>validator의 복잡성 처리</li>\n</ol>\n<ul>\n<li>string 처리 : 정규표현식 이용.</li>\n<li>isObject 추가</li>\n</ul>\n<ol start=\"2\">\n<li>조건문</li>\n</ol>\n<ul>\n<li>라우터와 라우팅 테이블로 변화.</li>\n</ul>\n<ol start=\"3\">\n<li>2pass 전략 이용</li>\n</ol>\n<ul>\n<li>1pass : 2pass때 사용할 자료를 수집.</li>\n<li>2pass : 1pass에 모은 자료를 처리.</li>\n</ul>\n<ol start=\"4\">\n<li>역할별로 코드 나누기.</li>\n</ol>\n<ul>\n<li>”{}”, ”[]” 와 같은 문자를 사용해 마지막에 감싸는 부분은 독립적으로 분리.</li>\n</ul>\n<ol start=\"5\">\n<li>변수명 제대로</li>\n</ol>\n<ul>\n<li>“go” 가 아니라 재귀의 의미를 갖도록 변경.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab\"c'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">err</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">throw</span> v<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">/* string 처리 : 엔터, excape string 처리 */</span> \r\n  <span class=\"token keyword\">const</span> stringReg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    regs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n      <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\"'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> el <span class=\"token operator\">!=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid typeof el : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> el<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>regs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> convertor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    table<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token function-variable function\">string</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stringReg<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token function-variable function\">number</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> el<span class=\"token punctuation\">,</span>\r\n      <span class=\"token function-variable function\">boolean</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> el<span class=\"token punctuation\">,</span>\r\n      <span class=\"token function-variable function\">object</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> isObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>isObject <span class=\"token operator\">?</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">:</span> el <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> el<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">/* 역할별로 코드 나누기 : \"[]\" , \",\" 등의 문자는 모두 combine 에서만 사용 */</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">combine</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/* 문자열은 이터러블이기 때문에 바로 구조분해 할당 가능 */</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">START</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">END</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[]\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token comment\">/* acc.value의 처리는 라우터와 라우팅 테이블을 이용해 처리 */</span>\r\n      res <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> convertor<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">.</span>isObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/* ,는 앞에서 붙이면 쉽게 자를 수 있음 */</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">START</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">END</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> acc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n       <span class=\"token comment\">/* 1pass : acc를 축적 */</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> prev<span class=\"token operator\">:</span> acc<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> v<span class=\"token punctuation\">,</span> isObject<span class=\"token operator\">:</span> v <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> v <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n       <span class=\"token comment\">/* 2pass : 축적한 acc처리 */</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stringify</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>유의할점</h2>\n<p><strong>내결함성 없애기</strong></p>\n<p>내결함성이란 프로그램이 실패하지 않게 만드는 장치를 말한다.\r\n내결함성에 걸리면 컨텍스트 오류가 발생하는데 컨텍스트 오류는 프로그램이 죽지도 않으면서 알수없는 값을 출력하기 때문에 디버깅하기 굉장히 어렵다.\r\n예를들면 이런코드를 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>list가 배열이 아니라면 0을 리턴하고 프로그램은 제대로 동작한다. 복잡하고 긴 코드로 이루어졌을 경우 하나의 내결함성으로 인해 디버깅이 굉장히 어려워지게 된다.</p>\n<p>이런 내결함성을 회피하기 위해서는</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invaild list : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>list<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>throw를 이용해서 프로그램을 죽여야한다.\r\nthrow는 문 이기때문에 코드의 중간에 삽입될 수 없다. 따라서 함수를 이용해 식으로 바꿔주고 사용하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">err</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">throw</span> v<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invaild list : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>list<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 작성할 때 고려해야 하는 것 : 안정성, <strong>신뢰성</strong>.</p>\n<p>안정성과 신뢰성은 비슷해보이지만 상반된 개념이다.\r\n내결함성을 갖게되면 안정성은 증가하지만 신뢰성은 감소하고, 내결함성을 해소하고 프로그램을 죽이면 안정성은 떨어지지만 신뢰성은 증가한다.\r\n<br/>\r\n<br/>\r\nex)\r\n사원 100명 중 1명의 월급이 10원으로 들어왔다.</p>\n<p>=> 나머지 99명의 월급은 제대로 된 액수가 맞는지 확신할 수 있을까?\r\n<br/>\r\n<br/>\r\n아주 작은 신뢰성의 문제는 전체를 의심하게 만든다. 우리가 지향해야할 점은 안정성의 증가가 아니라 <strong>신뢰성을 증가</strong>시키는 것이다.</p>\n<p>코드에 내결함성을 갖지 않도록 항상 유의하자.</p>","frontmatter":{"title":"Tail Recursion 3","summary":"JSON.stringify 구현하기","date":"2022.01.25.","categories":["Tech"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d37e4d76a2bc01d2cd64e6ca1ed59303/afa5c/tech.png","srcSet":"/static/d37e4d76a2bc01d2cd64e6ca1ed59303/2fe1e/tech.png 480w,\n/static/d37e4d76a2bc01d2cd64e6ca1ed59303/9bec7/tech.png 960w,\n/static/d37e4d76a2bc01d2cd64e6ca1ed59303/afa5c/tech.png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"},"sources":[{"srcSet":"/static/d37e4d76a2bc01d2cd64e6ca1ed59303/3a3a2/tech.webp 480w,\n/static/d37e4d76a2bc01d2cd64e6ca1ed59303/bde8a/tech.webp 960w,\n/static/d37e4d76a2bc01d2cd64e6ca1ed59303/c512e/tech.webp 1920w","type":"image/webp","sizes":"(min-width: 1920px) 1920px, 100vw"}]},"width":1920,"height":1080}},"publicURL":"/static/d37e4d76a2bc01d2cd64e6ca1ed59303/tech.png"}}}}]}},"pageContext":{"slug":"/TECH/tailRecursion3/"}},
    "staticQueryHashes": []}